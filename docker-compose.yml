version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: riskradar-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - riskradar-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: riskradar-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
    networks:
      - riskradar-network

  neo4j:
    image: neo4j:5-community
    hostname: neo4j
    container_name: riskradar-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_memory_pagecache_size: 512m
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - riskradar-network

  redis:
    image: redis:7-alpine
    hostname: redis
    container_name: riskradar-redis
    ports:
      - "6380:6379"
    networks:
      - riskradar-network

  # Application Services
  data-service:
    build: ./services/data-service
    container_name: riskradar-data-service
    ports:
      - "8001:8001"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      REDIS_URL: redis://redis:6379
      SERVICE_PORT: 8001
      LOG_LEVEL: INFO
    depends_on:
      - kafka
      - redis
    volumes:
      - ./services/data-service:/app
    networks:
      - riskradar-network

  ml-service:
    image: ml-service:latest
    container_name: riskradar-ml-service
    ports:
      - "8002:8002"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SERVICE_PORT: 8002
      LOG_LEVEL: INFO
    depends_on:
      - kafka
    volumes:
      - ./services/ml-service:/app
      - ml-models:/app/models
    networks:
      - riskradar-network

  graph-service:
    build: ./services/graph-service
    container_name: riskradar-graph-service
    ports:
      - "8003:8003"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      SERVICE_PORT: 8003
      GRAPHQL_PORT: 4001
      LOG_LEVEL: INFO
    depends_on:
      - kafka
      - neo4j
    volumes:
      - ./services/graph-service:/app
    networks:
      - riskradar-network

  api-gateway:
    build: ./services/api-gateway
    container_name: riskradar-api-gateway
    ports:
      - "8004:8004"
    environment:
      NODE_ENV: development
      PORT: 8004
      GRAPH_SERVICE_URL: http://graph-service:8003
      ML_SERVICE_URL: http://ml-service:8002
      DATA_SERVICE_URL: http://data-service:8001
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key
    depends_on:
      - graph-service
      - ml-service
      - data-service
      - redis
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - riskradar-network

  web-ui:
    build: ./services/web-ui
    container_name: riskradar-web-ui
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_GRAPHQL_URL: http://localhost:8004/graphql
      NEXT_PUBLIC_WS_URL: ws://localhost:8004/graphql
    depends_on:
      - api-gateway
    volumes:
      - ./services/web-ui:/app
      - /app/node_modules
      - /app/.next
    networks:
      - riskradar-network

  # Monitoring Services (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: riskradar-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - riskradar-network

  grafana:
    image: grafana/grafana:latest
    container_name: riskradar-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    networks:
      - riskradar-network

volumes:
  neo4j-data:
  neo4j-logs:
  ml-models:
  prometheus-data:
  grafana-data:

networks:
  riskradar-network:
    driver: bridge